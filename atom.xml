<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mandarava</title>
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-03T15:31:22.959Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mandarava</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reflection</title>
    <link href="http://yoursite.com/2017/01/03/Reflection/"/>
    <id>http://yoursite.com/2017/01/03/Reflection/</id>
    <published>2017-01-03T15:27:56.000Z</published>
    <updated>2017-01-03T15:31:22.959Z</updated>
    
    <content type="html">&lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;能够分析类能力的程序称为&lt;em&gt;反射&lt;/em&gt;(reflective)。&lt;/p&gt;
&lt;h3 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;headerlink&quot; title=&quot;Class类&quot;&gt;&lt;/a&gt;Class类&lt;/h3&gt;&lt;p&gt;在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型标识。 这个信息跟踪着每个对象所属的类。 虚拟机利用运行时类型信息选择相应的方法执行。&lt;br&gt;然而，可以通过专门的Java类访问这些信息。保存这些信息的类被称为Class，这个名字很容易让人混淆。 Object类中的getClass()方法将会返回一个Class类型的实例。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Date d = new Date();
Class c1 = d.getClass();
String name = c1.getName(); // name is set to &amp;quot;java.util.Date&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还可以调用静态方法forName获得类名对应的Class对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String className = &amp;quot;java.util.Date&amp;quot;;
Class c1 = Class.forName(className);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果类名保存在字符串中，并可在运行中改变，就可以使用这个方法。当然，这个方法只有在className是类名或接口名时才能够执行。否则，forName方法将抛出一个checked exception。&lt;/p&gt;
&lt;p&gt;虚拟机每个类型管理一个Class对象。 因此，可以利用 == 运算符实现两个类对象比较的操作。 例如,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(e.getClass() == Employee.class) ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一个很有用的方法newInstance()，可以用来快速地创建一个类的实例。例如，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e.getClass().newInstance();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建了一个与e具有相同类类型的实例。 newInstance()方法调用默认的构造器初始化新创建的对象。 如果这个类没有默认的构造器，就会抛出一个异常。&lt;br&gt;将forName与newInstance配合起来使用，可以根据存储在字符串中的类名创建一个对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String s = &amp;quot;java.util.Date&amp;quot;;
Object m = Class.forName(s).newInstance();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果需要以这种方式向希望按名称创建的类的构造器提供参数，就不要使用上面那条语句，而必须使用Constructor类中的newInstance方法。&lt;/p&gt;
&lt;h3 id=&quot;利用反射分析类的能力&quot;&gt;&lt;a href=&quot;#利用反射分析类的能力&quot; class=&quot;headerlink&quot; title=&quot;利用反射分析类的能力&quot;&gt;&lt;/a&gt;利用反射分析类的能力&lt;/h3&gt;&lt;p&gt;下面的程序显示了如何打印一个类的全部信息的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ReflectionTest {
    public static void main(String[] args) {
        // read class name from command line args or user input
        String name;
        if (args.length &amp;gt; 0)
            name = args[0];
        else {
            Scanner in = new Scanner(System.in);
            System.out.println(&amp;quot;Enter class name (e.g. java.util.Date): &amp;quot;);
            name = in.next();
         }

        try {
            // print class name and superclass name (if != Object)
            Class cl = Class.forName(name);
            Class supercl = cl.getSuperclass();
            String modifiers = Modifier.toString(cl.getModifiers());
            if (modifiers.length() &amp;gt; 0)
                System.out.print(modifiers + &amp;quot; &amp;quot;);
            System.out.print(&amp;quot;class &amp;quot; + name);
            if (supercl != null &amp;amp;&amp;amp; supercl != Object.class)
                System.out.print(&amp;quot; extends &amp;quot; + supercl.getName());
            System.out.print(&amp;quot;\n{\n&amp;quot;);
            printConstructors(cl);
            System.out.println();
            printMethods(cl);
            System.out.println();
            printFields(cl);
            System.out.println(&amp;quot;}&amp;quot;);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        System.exit(0);
    }

    /**
     * Prints all constructors of a class
     * 
     * @param cl
     *            a class
     */
    public static void printConstructors(Class cl) {
        Constructor[] constructors = cl.getDeclaredConstructors();

        for (Constructor c : constructors) {
            String name = c.getName();
            System.out.print(&amp;quot;   &amp;quot;);
            String modifiers = Modifier.toString(c.getModifiers());
            if (modifiers.length() &amp;gt; 0)
                System.out.print(modifiers + &amp;quot; &amp;quot;);
            System.out.print(name + &amp;quot;(&amp;quot;);

            // print parameter types
            Class[] paramTypes = c.getParameterTypes();
            for (int j = 0; j &amp;lt; paramTypes.length; j++) {
                if (j &amp;gt; 0)
                    System.out.print(&amp;quot;, &amp;quot;);
                System.out.print(paramTypes[j].getName());
            }
            System.out.println(&amp;quot;);&amp;quot;);
        }
    }

    /**
     * Prints all methods of a class
     * 
     * @param cl
     *            a class
     */
    public static void printMethods(Class cl) {
        Method[] methods = cl.getDeclaredMethods();

        for (Method m : methods) {
            Class retType = m.getReturnType();
            String name = m.getName();

            System.out.print(&amp;quot;   &amp;quot;);
            // print modifiers, return type and method name
            String modifiers = Modifier.toString(m.getModifiers());
            if (modifiers.length() &amp;gt; 0)
                System.out.print(modifiers + &amp;quot; &amp;quot;);
            System.out.print(retType.getName() + &amp;quot; &amp;quot; + name + &amp;quot;(&amp;quot;);

            // print parameter types
            Class[] paramTypes = m.getParameterTypes();
            for (int j = 0; j &amp;lt; paramTypes.length; j++) {
                if (j &amp;gt; 0)
                    System.out.print(&amp;quot;, &amp;quot;);
                System.out.print(paramTypes[j].getName());
            }
            System.out.println(&amp;quot;);&amp;quot;);
        }
    }

    /**
     * Prints all fields of a class
     * 
     * @param cl
     *            a class
     */
    public static void printFields(Class cl) {
        Field[] fields = cl.getDeclaredFields();

        for (Field f : fields) {
            Class type = f.getType();
            String name = f.getName();
            System.out.print(&amp;quot;   &amp;quot;);
            String modifiers = Modifier.toString(f.getModifiers());
            if (modifiers.length() &amp;gt; 0)
                System.out.print(modifiers + &amp;quot; &amp;quot;);
            System.out.println(type.getName() + &amp;quot; &amp;quot; + name + &amp;quot;;&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如输入: java.lang.Double&lt;br&gt;程序将会输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public final class java.lang.Double extends java.lang.Number
{
   public java.lang.Double(double);
   public java.lang.Double(java.lang.String);

   public boolean equals(java.lang.Object);
   public static java.lang.String toString(double);
   public java.lang.String toString();
   public int hashCode();
   public static int hashCode(double);
   public static double min(double, double);
   public static double max(double, double);
   public static native long doubleToRawLongBits(double);
   public static long doubleToLongBits(double);
   public static native double longBitsToDouble(long);
   public volatile int compareTo(java.lang.Object);
   public int compareTo(java.lang.Double);
   public byte byteValue();
   public short shortValue();
   public int intValue();
   public long longValue();
   public float floatValue();
   public double doubleValue();
   public static java.lang.Double valueOf(java.lang.String);
   public static java.lang.Double valueOf(double);
   public static java.lang.String toHexString(double);
   public static int compare(double, double);
   public static boolean isNaN(double);
   public boolean isNaN();
   public static boolean isFinite(double);
   public static boolean isInfinite(double);
   public boolean isInfinite();
   public static double sum(double, double);
   public static double parseDouble(java.lang.String);

   public static final double POSITIVE_INFINITY;
   public static final double NEGATIVE_INFINITY;
   public static final double NaN;
   public static final double MAX_VALUE;
   public static final double MIN_NORMAL;
   public static final double MIN_VALUE;
   public static final int MAX_EXPONENT;
   public static final int MIN_EXPONENT;
   public static final int SIZE;
   public static final int BYTES;
   public static final java.lang.Class TYPE;
   private final double value;
   private static final long serialVersionUID;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;在运行时使用反射分析对象&quot;&gt;&lt;a href=&quot;#在运行时使用反射分析对象&quot; class=&quot;headerlink&quot; title=&quot;在运行时使用反射分析对象&quot;&gt;&lt;/a&gt;在运行时使用反射分析对象&lt;/h3&gt;&lt;p&gt;下面是一个供所有类使用的toString方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ObjectAnalyzer {
    private ArrayList&amp;lt;Object&amp;gt; visited = new ArrayList&amp;lt;&amp;gt;();

    /**
     * Converts an object to a string representation that lists all fields.
     * 
     * @param obj
     *            an object
     * @return a string with the object&amp;apos;s class name and all field names and
     *         values
     */
    public String toString(Object obj) {
        if (obj == null)
            return &amp;quot;null&amp;quot;;
        if (visited.contains(obj))
            return &amp;quot;...&amp;quot;;
        visited.add(obj);
        Class cl = obj.getClass();
        if (cl == String.class)
            return (String) obj;
        if (cl.isArray()) {
            String r = cl.getComponentType() + &amp;quot;[]{&amp;quot;;
            for (int i = 0; i &amp;lt; Array.getLength(obj); i++) {
                if (i &amp;gt; 0)
                    r += &amp;quot;,&amp;quot;;
                Object val = Array.get(obj, i);
                if (cl.getComponentType().isPrimitive())
                    r += val;
                else
                    r += toString(val);
            }
            return r + &amp;quot;}&amp;quot;;
        }

        String r = cl.getName();
        // inspect the fields of this class and all superclasses
        do {
            r += &amp;quot;[&amp;quot;;
            Field[] fields = cl.getDeclaredFields();
            AccessibleObject.setAccessible(fields, true);
            // get the names and values of all fields
            for (Field f : fields) {
                if (!Modifier.isStatic(f.getModifiers())) {
                    if (!r.endsWith(&amp;quot;[&amp;quot;))
                        r += &amp;quot;,&amp;quot;;
                    r += f.getName() + &amp;quot;=&amp;quot;;
                    try {
                        Class t = f.getType();
                        Object val = f.get(obj);
                        if (t.isPrimitive())
                            r += val;
                        else
                            r += toString(val);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            r += &amp;quot;]&amp;quot;;
            cl = cl.getSuperclass();
        } while (cl != null);

        return r;
    }

}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;能够分析类能力的程序称为&lt;em&gt;反射&lt;/em&gt;(reflective)。&lt;/p&gt;
&lt;h3 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;headerlink&quot; title=&quot;Class类&quot;&gt;&lt;/a&gt;Class类&lt;/h3&gt;&lt;p&gt;在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型标识。 这个信息跟踪着每个对象所属的类。 虚拟机利用运行时类型信息选择相应的方法执行。&lt;br&gt;然而，可以通过专门的Java类访问这些信息。保存这些信息的类被称为Class，这个名字很容易让人混淆。 Object类中的getClass()方法将会返回一个Class类型的实例。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Objects and Classes</title>
    <link href="http://yoursite.com/2017/01/02/objects-and-classes/"/>
    <id>http://yoursite.com/2017/01/02/objects-and-classes/</id>
    <published>2017-01-02T09:18:05.000Z</published>
    <updated>2017-01-03T14:21:19.394Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、-不要编写返回引用可变对象的访问器方法&quot;&gt;&lt;a href=&quot;#1、-不要编写返回引用可变对象的访问器方法&quot; class=&quot;headerlink&quot; title=&quot;1、 不要编写返回引用可变对象的访问器方法&quot;&gt;&lt;/a&gt;1、 不要编写返回引用可变对象的访问器方法&lt;/h2&gt;&lt;p&gt;　　在Employee类中就违反了这个设计原则，其中的getHireDay方法返回了一个Date类对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Employe {
    private Date hireDay;
    ...
    public Date getHireDay() {
        return hireDay;
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;　　这样会破坏封装性！请看下面这段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Employee harry = ...;
Date d = harry.getHireDay();
double tenYearsInMilliSeconds = 10 * 365.25 * 24 *60 * 60 * 1000;
d.setTime(d.getTime() - (long) tenYearsInMilliSeconds);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　出错的原因很微妙。d和harry.hireDay引用同一个对象。对d调用更改器方法就可以自动得改变这个雇员对象的私有状态！&lt;br&gt;　　如果需要返回一个可变对象的引用，应该首先对它进行克隆（clone）。下面是修改后的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Employee {
    ...
    public Date getHireDay() {
        return hireDay.clone();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2、-final实例域&quot;&gt;&lt;a href=&quot;#2、-final实例域&quot; class=&quot;headerlink&quot; title=&quot;2、 final实例域&quot;&gt;&lt;/a&gt;2、 final实例域&lt;/h2&gt;&lt;p&gt;　　可以将实例域定义为final。构建对象时必须初始化这样的域。也就是说，必须确保在没一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够再对它进行修改。&lt;br&gt;　　final修饰符大都应用于基本(primitive)类型域，或不可变(immutable)类的域（如果类中的每个方法都不会改变其对象，这种类就是不可变的类）。对于可变的类，使用final修饰符可能会对读者造成混乱。&lt;br&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private final Date hiredate;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　仅仅意味着存储在hiredate变量中的对象引用在对象构造之后不能被改变，而并不意味着hiredate对象是一个常量。任何方法都可以对hiredate引用的对象调用setTime更改器。&lt;/p&gt;
&lt;h2 id=&quot;3、方法参数&quot;&gt;&lt;a href=&quot;#3、方法参数&quot; class=&quot;headerlink&quot; title=&quot;3、方法参数&quot;&gt;&lt;/a&gt;3、方法参数&lt;/h2&gt;&lt;p&gt;　　首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。 &lt;strong&gt;&lt;em&gt;按值调用(call by value)&lt;/em&gt;&lt;/strong&gt;表示方法接收的是调用者提供的&lt;strong&gt;&lt;em&gt;值&lt;/em&gt;&lt;/strong&gt;。 而&lt;strong&gt;&lt;em&gt;按引用调用(call by reference)&lt;/em&gt;&lt;/strong&gt;表示方法接收的是调用者提供的&lt;strong&gt;&lt;em&gt;变量地址&lt;/em&gt;&lt;/strong&gt;。 一个方法可以 修改传递引用所对应的变量值, 而不能修改传递值调用所对应的变量值。 “按….调用(call by)”是一个标准的计算机科学术语，它用来描述各种程序设计语言中方法参数的传递方式（事实上， 以前还有&lt;em&gt;按名称调用(call by name)&lt;/em&gt;， Algol程序设计语言是最古老的高级程序设计语言之一，它使用的就是这种参数传递方式。）&lt;/p&gt;
&lt;p&gt;　　Java程序设计语言总是采用&lt;strong&gt;&lt;em&gt;按值调用&lt;/em&gt;&lt;/strong&gt;。也就是说， 方法得到的是所有参数值的一个拷贝， 特别是方法不能修改传递给它的任何参数变量的内容。&lt;br&gt;　　例如，考虑下面的调用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double percent = 10;
harry.raiseSalary(percent);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　不必理踩这个方法的具体实现，在方法调用之后，percent的值还是10.&lt;br&gt;然而，方法参数共有两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型（数字、布尔值）。&lt;/li&gt;
&lt;li&gt;对象引用。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　读者已经看到，一个方法不可能修改一个基本数据类型的参数。而对象引用作为参数就不同了，可以很容易地利用下面这个方法将一个雇员的薪金提高的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void tripleSalary(Employee x) // works
{
    x.raiseSalary(200);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;harry = new Employee(...);
tripleSalary(harry);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;时，具体的执行过程为：&lt;br&gt;1) x 被初始化为harry值的拷贝， 这里是一个对象的引用。&lt;br&gt;2) raiseSalary方法应用于这个对象引用。 x和harry同时引用的那个Employee对象的薪金提高了200%。&lt;br&gt;3) 方法结束后，参数变量x不再使用。 当然，对象变量harry继续引用那个薪金增至3倍的雇员对象。&lt;/p&gt;
&lt;p&gt;　　实现一个改变对象参数状态的方法并不是一件难事。 理由很简单， 方法得到的是对象引用的拷贝， 对象引用及其他的拷贝同时引用同一个对象。&lt;br&gt;　　有些程序员认为Java程序设计语言对对象采用的是引用调用， 实际上， 这种理解是不对的。 由于这种误解具有一定的普遍性， 所以下面给出一个反例来详细地阐述一下这个问题。&lt;br&gt;首先， 编写一个交换两个雇员对象的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void swap(Employee x, Employee y) {
    Employee temp = x;
    x = y;
    y = temp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　如果Java程序设计语言对对象采用的是引用调用， 那么这个方法就应该能够实现交换数据的效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Employee a = new Employee(&amp;quot;Alice&amp;quot;,...);
Employee b = new Employee(&amp;quot;Bob&amp;quot;,...);
swap(a, b);
// does a now refer to Bob, b to Alice?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　但是，方法并没有改变存储在变量a和b中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// x refers to Alice, y to Bob
Employee temp = x;
x = y;
y = temp;
// now x refers to Bob, y to Alice
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　最终，白费力气。 在方法结束时参数变量x和y被丢弃了。原来的变量a和b仍然引用这个方法调用之前所引用的对象。&lt;br&gt;　　这个过程说明：Java程序设计语言对对象采用的不是引用调用，实际上，&lt;em&gt;对象引用进行的是值传递&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　下面总结一下Java程序设计语言中方法参数的使用情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。&lt;/li&gt;
&lt;li&gt;一个方法可以改变一个对象参数的状态。&lt;/li&gt;
&lt;li&gt;一个方法不能让对象参数引用一个新的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4、重载&quot;&gt;&lt;a href=&quot;#4、重载&quot; class=&quot;headerlink&quot; title=&quot;4、重载&quot;&gt;&lt;/a&gt;4、重载&lt;/h2&gt;&lt;p&gt;　　Java允许重载任何方法，而不只是构造器方法。因此，要完整地描述一个方法，需要指出方法名以及参数类型。 这叫做方法的&lt;strong&gt;&lt;em&gt;签名（signature）&lt;/em&gt;&lt;/strong&gt;。 例如，String类有4个称为indexOf的公有方法。 它们的签名是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indexOf(int)&lt;/li&gt;
&lt;li&gt;indexOf(int, int)&lt;/li&gt;
&lt;li&gt;indexOf(String)&lt;/li&gt;
&lt;li&gt;indexOf(String, int)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　返回类型不是方法签名的一部分。 也就是说，不能有两个名字相同、参数类型也相同却返回不同类型值的方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、-不要编写返回引用可变对象的访问器方法&quot;&gt;&lt;a href=&quot;#1、-不要编写返回引用可变对象的访问器方法&quot; class=&quot;headerlink&quot; title=&quot;1、 不要编写返回引用可变对象的访问器方法&quot;&gt;&lt;/a&gt;1、 不要编写返回引用可变对象的访问器方法&lt;/h2&gt;&lt;p&gt;　　在Employee类中就违反了这个设计原则，其中的getHireDay方法返回了一个Date类对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Employe {
    private Date hireDay;
    ...
    public Date getHireDay() {
        return hireDay;
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Fundamental Programming Structures in Java</title>
    <link href="http://yoursite.com/2016/12/28/Fundamental-Programming-Structures-in-Java/"/>
    <id>http://yoursite.com/2016/12/28/Fundamental-Programming-Structures-in-Java/</id>
    <published>2016-12-28T14:18:05.000Z</published>
    <updated>2016-12-29T15:21:30.004Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、数据类型&quot;&gt;&lt;a href=&quot;#1、数据类型&quot; class=&quot;headerlink&quot; title=&quot;1、数据类型&quot;&gt;&lt;/a&gt;1、数据类型&lt;/h2&gt;&lt;p&gt;　　Java中一共有8种基本类型(primitive type)，其中有4种整型、2种浮点类型、1种用表示Unicode编码的字符单元的字符类型char和1种用于表示真值的boolean类型。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1、Java整型&quot;&gt;&lt;a href=&quot;#1-1、Java整型&quot; class=&quot;headerlink&quot; title=&quot;1.1、Java整型&quot;&gt;&lt;/a&gt;1.1、Java整型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;存储需求&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;取值范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;int&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4字节&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-2 147 483 648 ~ 2 147 483 647(正好超过20亿)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;short&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2字节&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-32 768 ~ 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;long&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;8字节&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;　　从Java7开始，加上前缀0b就可以写二进制数。例如，0b1001就是9。还可以为数字字面量加下划线，如用1_000_000表示100万。这些下划线只是为了让人更易读。Java编译器会去除这些下划线。&lt;/p&gt;
&lt;h3 id=&quot;1-2、浮点类型&quot;&gt;&lt;a href=&quot;#1-2、浮点类型&quot; class=&quot;headerlink&quot; title=&quot;1.2、浮点类型&quot;&gt;&lt;/a&gt;1.2、浮点类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;存储需求&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;取值范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;float&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4字节&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;大约 ± 3.402 823 47E + 38F(有效位数为6 ~ 7位)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;double&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;8字节&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;大约 ± 1.797 693 134 862 315 70E + 308 (有效位数为 15 位)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2、运算符优先级：-同一级别运算符按照从左到右的次序进行计算&quot;&gt;&lt;a href=&quot;#2、运算符优先级：-同一级别运算符按照从左到右的次序进行计算&quot; class=&quot;headerlink&quot; title=&quot;2、运算符优先级：(同一级别运算符按照从左到右的次序进行计算)&quot;&gt;&lt;/a&gt;2、运算符优先级：(同一级别运算符按照从左到右的次序进行计算)&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;运算符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;结合性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[ ].( )(方法调用)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;!　~　++　--　+(一元运算)　-　(一元运算)()(强制类型转换) new&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从右向左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;*/%&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;+　-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;&amp;lt;　&amp;gt;&amp;gt;　&amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;　&amp;lt;=　&amp;gt;　&amp;gt;= instanceof&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;==　!=&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;#124;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;#124;&amp;#124;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从左向右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;?:&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从右向左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;=　+=　-=　*=　/=　%=　&amp;amp;=　&amp;#124;=　^=　&amp;lt;&amp;lt;=　&amp;gt;&amp;gt;=　&amp;gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从右向左&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;3、检测字符串是否相等&quot;&gt;&lt;a href=&quot;#3、检测字符串是否相等&quot; class=&quot;headerlink&quot; title=&quot;3、检测字符串是否相等&quot;&gt;&lt;/a&gt;3、检测字符串是否相等&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;s.equals(t);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　一定不能使用 == 运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否放置在同一个位置上。当然，如果字符串放置在同一个位置上，它们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String greeting = &amp;quot;Hello&amp;quot;; //initialize greeting to a string  
if(greeting == &amp;quot;Hello&amp;quot;) ...  
// probably true  
if(greeting.substring(0,3) == &amp;quot;Hel&amp;quot;) ...  
// probably false  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　如果虚拟机始终将相同的字符串共享，就可以使用==运算符检测是否相等。但实际上只有字符串&lt;em&gt;常量&lt;/em&gt;是共享的，而 + 或 substring等操作产生的结果并不是共享的。因此，千万不要使用 == 运算符测试字符串的相等性，以免在程序中出现糟糕的bug。&lt;/p&gt;
&lt;h2 id=&quot;4、构建字符串&quot;&gt;&lt;a href=&quot;#4、构建字符串&quot; class=&quot;headerlink&quot; title=&quot;4、构建字符串&quot;&gt;&lt;/a&gt;4、构建字符串&lt;/h2&gt;&lt;p&gt;　　有些时候，需要由较短的字符串构建字符串。采用字符串连接的方式达到此目的的效率比较低。每次连接字符串，都会构建一个新的String对象，即耗时，又浪费空间。使用StringBuilder类就可以避免这个问题的发生。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringBuilder builder = new StringBuilder();  
builder.append(ch); // appends a single character  
builder.append(str); // appends a string  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　在需要构建字符串时就调用toString方法，将可以得到一个String对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String completedString = builder.toString();　　//StringBuilder没有重写equals方法。    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　在JDK5.0中引入StringBuilder类。这个类的前身是StringBuffer，其效率稍有些低，但允许采用多线程的方式执行添加或删除字符的操作。&lt;/p&gt;
&lt;h2 id=&quot;5、格式化输出&quot;&gt;&lt;a href=&quot;#5、格式化输出&quot; class=&quot;headerlink&quot; title=&quot;5、格式化输出&quot;&gt;&lt;/a&gt;5、格式化输出&lt;/h2&gt;&lt;p&gt;　　Java中printf的转换符和标识(包含日期的)用于printf的转换符&lt;/p&gt;
&lt;h3 id=&quot;5-1、用于prinf的转换符&quot;&gt;&lt;a href=&quot;#5-1、用于prinf的转换符&quot; class=&quot;headerlink&quot; title=&quot;5.1、用于prinf的转换符&quot;&gt;&lt;/a&gt;5.1、用于prinf的转换符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;转换符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;十进制整数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;十六进制整数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;9f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;o&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;八进制整数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;237&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;f&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;定点浮点数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;15.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;e&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;指数浮点数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1.59e+01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;通用浮点数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;a&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;十六进制浮点数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0x1.fccdp3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;字符串&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;c&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;字符&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;H&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;布尔&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;h&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;散列码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;42628b2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;tx&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;日期时间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;见下表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;百分号&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;n&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;与平台有关的行分隔符&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.out.printf(&amp;quot;Hello, %s.　Next year, you&amp;apos;ll be %d&amp;quot;, name,　age);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-2、用于printf的标志&quot;&gt;&lt;a href=&quot;#5-2、用于printf的标志&quot; class=&quot;headerlink&quot; title=&quot;5.2、用于printf的标志&quot;&gt;&lt;/a&gt;5.2、用于printf的标志&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;标识&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;目的&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打印正数和负数的符号&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;+3333.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;空格&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在正数之前加空格&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;#124;　3333.33&amp;#124;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数字之前补0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;003333.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;左对齐&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;#124;3333.33　&amp;#124;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;(&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将负数括在括号内&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;(3333.33)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;,&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;添加分组分隔符&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;3,333.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;#(用于f格式)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;包含小数点&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;3,333.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;#(对于x或0格式)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;添加前缀0x或0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0xcafe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;转换为大写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0xCAFE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;给定被格式化的参数索引。例如， %1\$d, %1\$x将以十进制和十六进制格式打印第一个参数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;159 9F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;格式化前面说明的数值。 例如%d%&amp;lt;x以十进制和十六进制打印同一个数值&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;159 9F&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.out.printf(&amp;quot;%,.2f&amp;quot;,&amp;quot;10000.0./3.0&amp;quot;); 打印3,333.33
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-3、日期和时间的转换符&quot;&gt;&lt;a href=&quot;#5-3、日期和时间的转换符&quot; class=&quot;headerlink&quot; title=&quot;5.3、日期和时间的转换符&quot;&gt;&lt;/a&gt;5.3、日期和时间的转换符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;转换符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;c&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;完整的日期和时间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Mon Feb 09 18:05:11 PST 2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ISO 8061日期&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2004-02-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;美国格式的日期&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;02/09/2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;T&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;24小时时间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;18:03:23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;r&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;12小时时间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;05:03:23 pm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;R&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;24小时时间没有秒&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;18:05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4位数字的年（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;y&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;年的后两位数字（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;年的前两位数字（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;月的完整拼写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;February&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;b或h&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;月的缩写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;m&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的月（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的日（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;e&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的月（前面不补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;A&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;星期几的完整拼写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Monday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;a&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;星期几的缩写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Mon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;j&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;三位数的年中的日子（前面补0），在001到366之间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;069&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的小时（前面补0）。在0到23之间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;k&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的小时（前面不补0）在0到23之间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的小时（前面补0）。在0到12之间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的小时（前面不补0），在0到12之间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的分钟（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两位数字的秒（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;三位数字的毫秒（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;047&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;九位数字的毫微秒（前面补0）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;047000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;P&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上午或者下午的大写标志&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;p&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上午或者下午的小写标志&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;z&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从GMT起。RFC822数字移位&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-0800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Z&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;时区&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;PST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从格林威治时间1970-01-01 00:00:00起的秒数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;107884319&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Q&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从格林威治时间1970-01-01 00:00:01起的毫秒数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;107884319047&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;　　可以采用一个格式化的字符串指出要被格式化的参数索引。索引必须紧跟在%后面，并以$终止。参数索引值从1开始，而不是从0开始。&lt;br&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.out.printf(&amp;quot;%1$s %2$tB %2$te, %2$tY&amp;quot;,&amp;quot;Due date:&amp;quot;, new Date());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打印：  Due　Date:　February　9,　2004&lt;br&gt;还可以选择使用 &amp;lt; 标志。它指示前面格式说明中的参数将被再次使用。也就是说，下列语句将产生与前面语句同样的输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.out.printf(&amp;quot;%s %tB %&amp;lt;te, %&amp;lt;tY&amp;quot;, &amp;quot;Due Date:&amp;quot;, new Date());
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、数据类型&quot;&gt;&lt;a href=&quot;#1、数据类型&quot; class=&quot;headerlink&quot; title=&quot;1、数据类型&quot;&gt;&lt;/a&gt;1、数据类型&lt;/h2&gt;&lt;p&gt;　　Java中一共有8种基本类型(primitive type)，其中有4种整型、2种浮点类型、1种用表示Unicode编码的字符单元的字符类型char和1种用于表示真值的boolean类型。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/22/hello-world/"/>
    <id>http://yoursite.com/2016/08/22/hello-world/</id>
    <published>2016-08-22T14:27:33.324Z</published>
    <updated>2016-08-22T14:27:33.325Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AJAX Cross-domain requests</title>
    <link href="http://yoursite.com/2016/06/16/AJAX%20Cross-domain%20requests/"/>
    <id>http://yoursite.com/2016/06/16/AJAX Cross-domain requests/</id>
    <published>2016-06-16T10:48:58.000Z</published>
    <updated>2016-08-22T14:27:33.317Z</updated>
    
    <content type="html">&lt;h2 id=&quot;AJAX跨域请求-JSONP&quot;&gt;&lt;a href=&quot;#AJAX跨域请求-JSONP&quot; class=&quot;headerlink&quot; title=&quot;AJAX跨域请求 - JSONP&quot;&gt;&lt;/a&gt;AJAX跨域请求 - JSONP&lt;/h2&gt;&lt;p&gt;struts2中的配置：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;callbackParameter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;callback&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//jsonp回调函数名(callback)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String jsonpCallback = HttpServletRequest.getParameter(&lt;span class=&quot;string&quot;&gt;&quot;callbackFunction&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回jsonp格式数据  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out.println(jsonpCallback+&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;+resultJson.toString()+&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;JQuery：\$.ajax/ \$.getJSON支持jsonp格式的跨域，但是只支持GET方式，暂不支持POST&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jquery-2.1.4.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;javascript:getdata();&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getdata&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url : &lt;span class=&quot;string&quot;&gt;&#39;http://10.1.1.3:8080/test/testAction&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type : &lt;span class=&quot;string&quot;&gt;&#39;get&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataType : &lt;span class=&quot;string&quot;&gt;&#39;jsonp&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 重写JSONP请求的回调函数名称。该值用于替代&quot;url?callback=?&quot;中的&quot;callback&quot;部分。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jsonp : &lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crossDomain : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 为JSONP请求指定一个回调函数名。这个值将用来取代jQuery自动生成的随机函数名。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 从jQuery 1.5开始，你也可以指定一个函数来返回所需的函数名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jsonpCallback : &lt;span class=&quot;string&quot;&gt;&quot;successCallback&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        success : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        error : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;something wrong&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;successCallback&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AJAX跨域请求-JSONP&quot;&gt;&lt;a href=&quot;#AJAX跨域请求-JSONP&quot; class=&quot;headerlink&quot; title=&quot;AJAX跨域请求 - JSONP&quot;&gt;&lt;/a&gt;AJAX跨域请求 - JSONP&lt;/h2&gt;&lt;p&gt;struts2中的配置：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;callbackParameter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;callback&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//jsonp回调函数名(callback)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String jsonpCallback = HttpServletRequest.getParameter(&lt;span class=&quot;string&quot;&gt;&quot;callbackFunction&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回jsonp格式数据  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out.println(jsonpCallback+&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;+resultJson.toString()+&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="jsonp" scheme="http://yoursite.com/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>centos6-shadowsocks</title>
    <link href="http://yoursite.com/2016/04/19/centos6-shadowsocks/"/>
    <id>http://yoursite.com/2016/04/19/centos6-shadowsocks/</id>
    <published>2016-04-19T13:18:05.000Z</published>
    <updated>2016-08-22T14:27:33.321Z</updated>
    
    <content type="html">&lt;h2 id=&quot;在centos6上部署shadowsocks服务端简易步骤&quot;&gt;&lt;a href=&quot;#在centos6上部署shadowsocks服务端简易步骤&quot; class=&quot;headerlink&quot; title=&quot;在centos6上部署shadowsocks服务端简易步骤&quot;&gt;&lt;/a&gt;在centos6上部署shadowsocks服务端简易步骤&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install m2crypto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install python-setuptools &amp;amp;&amp;amp; easy_install pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件:&quot;&gt;&lt;/a&gt;修改配置文件:&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/shadowsocks.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加如下内容&quot;&gt;&lt;a href=&quot;#添加如下内容&quot; class=&quot;headerlink&quot; title=&quot;添加如下内容:&quot;&gt;&lt;/a&gt;添加如下内容:&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;youripaddress&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;443&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;lcoal_address&quot;&lt;/span&gt;:1080,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;yourpassword&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;启动shadowsocks&quot;&gt;&lt;a href=&quot;#启动shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;启动shadowsocks&quot;&gt;&lt;/a&gt;启动shadowsocks&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssserver -c /etc/shadowsocks.json &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在centos6上部署shadowsocks服务端简易步骤&quot;&gt;&lt;a href=&quot;#在centos6上部署shadowsocks服务端简易步骤&quot; class=&quot;headerlink&quot; title=&quot;在centos6上部署shadowsocks服务端简易步骤&quot;&gt;&lt;/a&gt;在centos6上部署shadowsocks服务端简易步骤&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install m2crypto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install python-setuptools &amp;amp;&amp;amp; easy_install pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="centos" scheme="http://yoursite.com/categories/centos/"/>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
  </entry>
  
</feed>
